# vim: set filetype=yaml
# Not using ES6 yet
ecmaFeatures:
  arrowFunctions: false
  binaryLiterals: false
  blockBindings: false
  classes: false
  defaultParams: false
  destructuring: false
  forOf: false
  generators: false
  modules: false
  objectLiteralComputedProperties: false
  objectLiteralDuplicateProperties: false
  objectLiteralShorthandMethods: false
  objectLiteralShorthandProperties: false
  octalLiterals: false
  regexUFlag: false
  regexYFlag: false
  spread: false
  superInFunctions: false
  templateStrings: false
  unicodeCodePointEscapes: false
  globalReturn: false
  jsx: false

env:
  # Provides require/define from amd spec
  amd: true

globals:
  console: false
  # TODO: Remove exports, files should use module.exports
  exports: true
  module: false

# All rules documented here: http://eslint.org/docs/rules/
rules:
  # Possible errors

  # Don't allow unnecessary trailing commas (e.g. [1,2,])
  comma-dangle: [2, "never"]
  # Allow assignments in conditions only if surrounded by extra parens
  no-cond-assign: [2, "except-parens"]
  # Allow console.log for node
  no-console: 1
  # Warn about if (false) and similar
  no-constant-condition: 1
  # Watch for mistakes writing RegEx for invisible characters in ASCII 0-31
  no-control-regex: 2
  # Don't want debugger statements in production
  no-debugger: 2
  # Functions that repeat argument names are SyntaxErrors in strict mode
  no-dupe-args: 2
  # Object declarations with the same key (e.g. {a: 1, a: 2})
  no-dupe-keys: 2
  # Duplicate case in switch statements
  no-duplicate-case: 2
  # Empty statements (e.g. if (x) {}), must at least put comment within
  no-empty: 2
  # Don't allow empty character class in regexp (e.g. /[]/)
  no-empty-character-class: 2
  # Don't allow re-assignment of exceptions
  no-ex-assign: 2
  # Warn about unnecessary boolean casts in conditionals (e.g. if (!!x))
  no-extra-boolean-cast: 2
  # Warn about unnecessary parens (e.g. (2 * 3) instead of 2 * 3)
  no-extra-parens: 1
  # No extra semi-colons (e.g. foo();;;)
  no-extra-semi: 2
  # Don't allow overwriting of functions declared via `function name()` syntax
  no-func-assign: 2
  # Variable/Function declarations must occur at top-level of scope
  # TODO: Make strict
  no-inner-declarations: [1, "both"]
  # Validate string arguments passed to the RegExp constructor
  no-invalid-regexp: 2
  # Don't allow non-space/tab whitespace (e.g. zero width space)
  no-irregular-whitespace: 2
  # Catch use of (!a in b) instead of (!(a in b))
  no-negated-in-lhs: 2
  # Don't allow calling global objects as functions (e.g. Math())
  no-obj-calls: 2
  # Don't allow multiple spaces in RegExp, makes them hard to read
  no-regex-spaces: 2
  # Don't allow array declarations like [1,,2] which will have three items
  no-sparse-arrays: 2
  # Warn about unreachable code
  no-unreachable: 1
  # Always use isNaN(), don't allow comparison to NaN
  use-isnan: 2
  # If we're going to use JSDoc, then we should do it right
  valid-jsdoc: [1, {
      "prefer": {
        # Use @returns, not @return
        "return": "returns"
      },
      # Don't require full descriptions just yet
      requireParamDescription: false,
      requireReturnDescription: false
  }]
  # Catch typos in typeof checks (e.g. typeof foo === 'strng')
  valid-typeof: 2
  # Catch confusing newlines that seem to terminate statements but don't
  no-unexpected-multiline: 2

  # Best Practices
  # Support every get() has to have a set() and vice-versa
  # TODO: make strict
  accessor-pairs: 1
  # JS-hoisting of variables can cause bugs if you think it works like C
  block-scoped-var: 1
  # Cyclomatic complexity (disabled)
  complexity: [0, 4]
  # All return statements either return a value, or they don't
  # TODO: Make strict
  consistent-return: 1
  # Don't allow omission of curly braces for conditionals, etc
  curly: [2, "all"]
  # Provide a default in switch, unless there's a comment with "no default"
  default-case: 1
  # Use foo.bar instead of foo['bar']
  dot-notation: 2
  # When breaking a statement across a line, break before the .
  dot-location: [2, "property"]
  # Must use triple equals, except 2 literals, typeof, and null
  eqeqeq: [2, "smart"]
  # Use hasOwnProperty when using a for in loop
  guard-for-in: 1
  # No window.alert
  no-alert: 2
  # arguments.caller, etc aren't allowed in strict mode
  no-caller: 2
  # Escape division operators in RegExps
  no-div-regex: 2
  # If statements that return don't need else blocks
  no-else-return: 1
  # Labeled statements can only be used with labeled break/continue
  no-empty-label: 2
  # Must triple equal for null
  no-eq-null: 2
  # Don't use eval
  no-eval: 2
  # Watch out when extending native objects (e.g. Array.prototype)
  no-extend-native: 2
  # Warn if bound function doesn't use this
  no-extra-bind: 2
  # No fallthrough in case statements (override with // falls through)
  no-fallthrough: 1
  # Decimal values must have a number before and after the .
  no-floating-decimal: 2
  # Make type coersion readable
  no-implicit-coercion: 1
  # Don't allow eval to happen via setTimeout or setInterval
  no-implied-eval: 2
  # __iterator__ isn't really supported in browsers
  no-iterator: 2
  # Don't use labeled break statements
  no-labels: 2
  # Don't allow standalone blocks (no point)
  no-lone-blocks: 2
  # Don't create functions in loops (leads to bugs via continuations)
  # TODO: Make strict
  no-loop-func: 1
  # Consistent whitespace around conditions, etc
  no-multi-spaces: [2]
  # Multi-line strings do not work in JS with a \
  no-multi-str: 2
  # Don't reassign native objects (e.g. encodeURIComponent)
  no-native-reassign: 2
  # Don't use wrappers for native objects (e.g. new Number(33))
  no-new-wrappers: 2
  # Don't use new Function()
  no-new-func: 2
  # If you're calling new, gotta do something with the value
  no-new: 2
  # No octal escape sequences (deprecated in ES5)
  no-octal-escape: 2
  # No octal numbers
  no-octal: 2
  # Don't modify function parameters, since it modifies the arguments object
  # TODO: Make strict
  no-param-reassign: 1
  # Don't allow process.env (disabled)
  no-process-env: 0
  # Don't allow __proto__ (deprecated)
  no-proto: 2
  # Don't allow redeclaring a variable with var
  no-redeclare: 2
  # Don't assign something in return, it's confusing
  no-return-assign: 2
  # No javascript: urls
  no-script-url: 2
  # Don't try if (x === x)
  no-self-compare: 2
  # Don't use commas for multiple operations
  no-sequences: 2
  # Must throw actual Error objects, not just strings
  no-throw-literal: 2
  # Don't allow expressions that do nothing
  no-unused-expressions: 2
  # Don't use call() or apply() when the normal syntax does the same thing
  no-useless-call: 2
  # Don't concatenate two literals
  no-useless-concat: 2
  # Don't use void
  no-void: 2
  # Warn on comments like TODO
  no-warning-comments: [0, {
    "terms": ["todo", "bug", "fixme", "xxx"],
    "location": "start"
  }]

  # Don't use with
  no-with: 2
  # Require radix with parseInt
  radix: 2
  # Hoisting means variable declarations are effectively on top anyway
  vars-on-top: 1
  # Immediate function invocation must be wrapped
  wrap-iife: 2
  # Avoid yoda conditions
  yoda: 2

  # Strict mode
  # Use strict should only happen at global level (disabled)
  strict: [0, "global"]

  # Variable declarations
  # Don't enforce variables being initialized at declare-time
  init-declarations: [0, "always"]
  # Don't let catch variables clobber something from outside the scope
  no-catch-shadow: 2
  # Don't allow variable deletion (doesn't actually work)
  no-delete-var: 2
  # Don't allow labels that are the same as variable names
  no-label-var: 2
  # Don't shadow reserved names (e.g. NaN)
  no-shadow-restricted-names: 2
  # Don't allow variable shadowing (re-declaring something from outer scope)
  no-shadow: 2
  # Don't set vars to undefined
  no-undef-init: 2
  # Don't allow using undefined variables (make globals explicit)
  no-undef: 2
  # Don't used undefined variable
  no-undefined: 2
  # Don't have unused variables
  # TODO: enforce on arguments
  no-unused-vars: [2, {"args": "none"}]
  # Can't use variables/function before their definition
  no-use-before-define: [1]

  # Node
  # Consider returning callback values
  # TODO: consider enforcing
  callback-return: 0
  # Requires should always go into the global scope (disabled)
  global-require: 0
  # Errors must be handled
  # TODO: Make strict
  handle-callback-err: 1
  # Group requires / variable definitions (disabled)
  no-mixed-requires: 0
  # Don't new things that are required
  no-new-require: 2
  # Must use path.join with __dirname or __filename
  no-path-concat: 2
  # Don't allow calling process.exit()
  no-process-exit: 2
  # Blacklist certain modules for inclusion (disabled)
  no-restricted-modules: [0]
  # Warn when using *Sync versions of APIs
  no-sync: 1

  # Stylistic issues
  # No spaces inside of array bracktes []
  array-bracket-spacing: [2, "never"]
  # Use spaces inside of single-line code blocks
  block-spacing: [2, "always"]
  # Brace styles, use one true brace style
  # TODO: Make strict
  brace-style: [1, "1tbs"]
  # Don't enforce this rule, see the id-match rule instead
  camelcase: [0, {"properties": "always"}]
  # Spaces after commas, always
  # TODO: Make strict
  comma-spacing: [1, {"before": false, "after": true}]
  # Commas at end of line
  comma-style: [2, "last"]
  # No spaces inside of object property accesors
  computed-property-spacing: [2, "never"]
  # Always use that as this
  consistent-this: [2, "that"]
  # Require new line at end
  eol-last: 2
  # Require functions to always have names (disabled)
  func-names: 0
  # Always declare functions as variables
  # TODO: Make strict
  func-style: [1, "expression"]
  # Requirements for identifier names
  id-length: [0, {"min": 1, "max": 20, "properties": "never", "exceptions": []}]
  # Indetifiers must match regex, prefix with (up to) 2 underscores, camelCase
  id-match: [2, "^(var_args|_)$|^_?[A-Z]+(_[A-Z0-9]+)*$|^(opt_)?_{0,2}[a-zA-Z0-9]+$", {"properties": false}]
  # 2 spaces, line up variable declarations (not the equal signs)
  # TODO: Make strict
  indent: [1, 2, {
    "SwitchCase": 1,
    "VariableDeclarator": {"var": 2, "let": 2, "const": 3}
    }]
  # JSX should use double quotes
  jsx-quotes: [0, "prefer-double"]
  # Space after, but not before object keys
  key-spacing: [2, {"beforeColon": false, "afterColon": true}]
  # Not religious about spacing around comments
  lines-around-comment: [2, {
    beforeBlockComment: false,
    afterBlockComment: false,
    beforeLineComment: false,
    afterLineComment: false
  }]
  # Enforce Unix (LF) linebreaks
  linebreak-style: [2, "unix"]
  # Avoid callback nesting hell (disabled)
  max-nested-callbacks: [0, 4]
  # Constructors must be capitalized, and capitalized vars are constructors
  # disabled for now since react components break this rule
  # TODO: Make strict
  new-cap: [0, {
    "capIsNew": true,
    "capIsNewExceptions": ["React"],
    "newIsCap": true,
    "newIsCapExceptions": []
  }]
  # Require parens after constructor
  new-parens: 2
  # Require newline after var
  newline-after-var: [1, "always"]
  # Only use Array constructor for sparse arrays
  no-array-constructor: 2
  # Don't use continue in loops
  # TODO: make stict
  no-continue: 1
  # Comments always on their own line
  no-inline-comments: 1
  # Convert single if statement in else to an else if
  # TODO: Make strict
  no-lonely-if: 1
  # Only allow spaces anyway
  no-mixed-spaces-and-tabs: 2
  # Warn about unnecessary whitespace
  no-multiple-empty-lines: [1, {"max": 2}]
  # Don't nest ternaries
  # TODO: Make strict
  no-nested-ternary: 1
  # Don't use new Object()
  no-new-object: 2
  # Don't use with statements
  no-restricted-syntax: [2, "WithStatement"]
  # Never put a space after function declaration
  no-spaced-func: 2
  # Allow ternary operators
  no-ternary: 0
  # No trailing whitespace at end of line
  no-trailing-spaces: 2
  # Allow dangling underscores for now
  no-underscore-dangle: 0
  # Disallow pointless ternary operations
  no-unneeded-ternary: 2
  # Disallow padding inside curly braces
  object-curly-spacing: [2, "never"]
  # Require one variable declaration per scope (disabled)
  one-var: [0, "always"]
  # Simplify operator where possible
  operator-assignment: [2, "always"]
  # Break lines after an operator
  operator-linebreak: [
    2, "after", {"overrides": {"?": "any", ":": "any"}}
  ]
  # No excess whitespace on blocks
  # TODO: Make strict
  padded-blocks: [1, "never"]
  # Make sure to quote object properties when needed
  # TODO: Make strict
  quote-props: [1, "as-needed"]
  # Single quotes, except where it would require escaping
  quotes: [2, "single", "avoid-escape"]
  # We will one day require JSDoc
  require-jsdoc: 0
  # spacing around semicolons, none before, one after
  semi-spacing: [2, {"before": false, "after": true}]
  # Always use semicolons
  semi: [2, "always"]
  # Always need space after a semi-colon on same line
  semi-spacing: [2, {before: false, after: true}]
  # Always sort variables
  # TODO: Make strict
  sort-vars: 0
  # Always want space after keywords (if, for, etc)
  space-after-keywords: [2, "always"]
  # Always want space before keywords (catch, else, etc) (disabled)
  space-before-keywords: [0, "always"]
  # Always want space before code block
  space-before-blocks: [2, "always"]
  # No spaces after function clause
  space-before-function-paren: [2, "never"]
  # No spaces around parens
  space-in-parens: [2, "never"]
  # Spaces around infix operators
  # TODO: Make strict
  space-infix-ops: 1
  # Require space after return, etc
  space-return-throw-case: 2
  # Require space after unary operators such as typeof, but not ++
  # TODO: Make strict
  space-unary-ops: [1, { "words": true, "nonwords": false }]
  # Require space after comment
  spaced-comment: [2, "always", {
    "exceptions": ["*"],
    "markers": ["eslint", "eslint-disable", "eslint-enable", "global"]
  }]
  # Don't need to wrap regexes
  wrap-regex: 0

  # ES6
  # Parentheses around arrow function arguments
  arrow-parens: [2, "always"]
  # Spaces around the arrow
  arrow-spacing: [2, {"before": true, "after": true}]
  # Check valid constuctors and calls to super()
  constructor-super: 2
  # Always put * right before function
  generator-star-spacing: [2, "before"]
  # Classes can't be reassigned
  no-class-assign: 2
  # Consts are constants
  no-const-assign: 2
  # No duplicate class members
  no-dupe-class-members: 2
  # Don't use this before super() is called
  no-this-before-super: 2
  # Require let/const instead of var (disabled)
  # TODO: make strict
  no-var: 0
  # Prefer ES6 syntactic sugar inside of objects
  # TODO: enable with ES6
  object-shorthand: 0
  # Prefer arrows over anonymous functions
  # TODO: enable with ES6
  prefer-arrow-callback: 0
  # Make variables that don't change consts
  # TODO: enable with ES6
  prefer-const: 0
  # Use ES6 spreads instead of apply
  # TODO: enable with ES6
  prefer-spread: 0
  # Function.prototype.{call/apply} is deprecated in ES6, and we are ok with that
  prefer-reflect: 0
  # Use tempaltes where possible
  # TODO: enable with ES6
  prefer-template: 0
  # Generators don't need ot yield
  require-yield: 0

  # Legacy options
  # Try not to nest things too deeply
  max-depth: [1, 5]
  # Warn past 120 characters, 80 should be set by your editor
  # TODO: make strict at 80 chars
  max-len: [1, 80, 2]
  # Max params on a function (disabled)
  max-params: [0, 4]
  # Max statements in a function (disabled)
  max-statements: [0, 20]
  # Prohibit bitwise operators
  no-bitwise: 2
  # Allow ++ and --
  no-plusplus: 0

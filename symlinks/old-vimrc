" vim:fdm=marker ts=2 sts=2 sw=2 fdl=4

" Check if NeoBundle is installed by seeing if the README is there
if !filereadable(expand('~/.vim/bundle/neobundle.vim/README.md'))
  echo 'Must install NeoBundle. Run ~/dotfiles/setup.sh'
  echo 'Run vim -u NONE to open vim without .vimrc'
  exit
endif

" NeoBundle Setup {{{
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
" }}}

" Bundles {{{
" Core Features

" Editing features
" NeoBundle 'ervandew/supertab'

" Languages & Dev Tools {{{
NeoBundle 'gregsexton/gitv'
NeoBundleLazy 'pangloss/vim-javascript', {
\   'autoload': {
\     'filetypes': ['javascript']
\   }
\ }
NeoBundleLazy 'mxw/vim-jsx', {
\   'autoload': {
\     'filetypes': ['javascript']
\   }
\ }
NeoBundleLazy 'mattn/emmet-vim', {
\   'autoload': {
\     'filetypes': ['html', 'css']
\   }
\ }
NeoBundleLazy 'kchmck/vim-coffee-script', {
\   'autoload': {
\     'filetypes': ['coffee']
\   }
\ }
NeoBundleLazy 'tpope/vim-liquid', {
\   'autoload': {
\     'filetypes': ['html', 'markdown']
\   }
\ }

" }}}

NeoBundle 'fortes/vim-personal-snippets'

" Colors & Display {{{
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'sjl/badwolf'
NeoBundle 'w0ng/vim-hybrid'
" Gutter & Status Line
" NeoBundle 'bling/vim-bufferline'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'bling/vim-airline'
" }}}
" }}}

" NeoBundle Coda {{{
call neobundle#end()

filetype plugin on

" Check for uninstalled bundles and automatically install
NeoBundleCheck
" }}}

" Base Configuration {{{

" Sensible things {{{


" Don't use modelines (security concerns)
set nomodeline

" Use system clipboard by default
set clipboard=unnamed

" }}}

" Indents, Wrapping, and Whitespace {{{

" Automatically reselect visual block after indent
" vnoremap < <gv
" vnoremap > >gv


" Highlight current line and column when in insert mode
autocmd WinEnter,InsertEnter * set cursorline cursorcolumn
autocmd WinLeave,InsertLeave * set nocursorline nocursorcolumn

" }}}

" Autocomplete {{{

" Control-K for omnicomplete
inoremap <C-k> <c-x><c-o><Down>
" Use Control-space to omnicomplete
inoremap <C-Space> <c-x><c-o><Down>
" In terminal, control-space makes a different character
inoremap <NUL> <C-X><C-O><Down>

" Escape closes the menu and goes back to what was there
inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
" Enter/Tab accepts the current match
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Tab> pumvisible() ? "\<C-y>" : "\<Tab>"
" }}}

" Efficiency Shortcuts {{{

" Move to beginning / end of line with H/L
nnoremap H 0
nnoremap L $

" Navigate splits with control key
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
" Note: This overrides the normal <C-l> which redraws the screen
nnoremap <C-l> <C-l><C-w>l

" Navigate splits with arrow keys
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l
nnoremap <up> <C-w>k
nnoremap <down> <C-w>j

" <leader><leader> to switch to last file edited
nnoremap <leader><leader> <c-^>

" <leader>par to format the paragraph the cursor is currently in (or selection)
if executable('par')
  nnoremap <leader>par {!}par<CR>
  vnoremap <leader>par !par<CR>
endif

" }}}

" Projects, Filenames, and Search {{{


" Center cursor after jumping to next match
nnoremap n nzz
" }}}

" Spelling {{{
" Toggle spell check
nnoremap <F7> :setlocal spell! spell?<CR>
" }}}
" }}}

" FileType tweaks {{{

" Some plugins will override the formatoptions, so this overrides them back
autocmd BufNewFile,BufReadPost * setlocal formatoptions+=lbon
" Stupid old vim on MacOS doesn't support 'j' formatoption
if version >= 740
  autocmd BufNewFile,BufReadPost * setlocal formatoptions+=j
endif

" Use esformatter for formatting JS
autocmd FileType javascript setlocal formatprg=esformatter

" Use html-beautify and css-beautify for respective types
autocmd FileType css setlocal formatprg=css-beautify\ -s\ 2\ -f\ -
autocmd FileType less setlocal formatprg=css-beautify\ -s\ 2\ -f\ -
autocmd FileType html setlocal formatprg=html-beautify\ -s\ 2\ -I\ -f\ -

" Enable Emmet for HTML/CSS
autocmd FileType html,css,less EmmetInstall

"}}}

" Plugin Configuration {{{

" Airline {{{
" Use nice symbols (assumes patched fonts)
let g:airline_powerline_fonts = 1

" Set truncation order when short on space
" y: fileencoding, fileformat
" x: tagbar, filetype, virtualenv
" b: hunks, branch
" z: percentage, line number, column number
let g:airline#extensions#default#section_truncate_width = {
\   'y': 140,
\   'x': 120,
\   'b': 100,
\   'z': 80
\ }

" Better colors
let g:airline_theme='simple'
" }}}

" Bufferline {{{
" Should only be in airline
let g:bufferline_echo=0

" Make sure the current file is always visible
let g:bufferline_rotate=1
" }}}

" Fugitive {{{
" Use vertical Gdiffs
set diffopt+=vertical
" }}}

" Syntastic {{{
" Check on open
let g:syntastic_check_on_open=1

" Use nicer symbols
let g:syntastic_error_symbol = '✗'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_warning_symbol = '⚠'

" JS Checking
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jshint_args = '--config ~/.jshintrc'

" eslint is way too slow to run on every save
let g:syntastic_javascript_eslint_args = "--config ~/.eslintrc"
nnoremap <leader>esl :SyntasticCheck eslint<CR>

" Map leader-er to show syntastic errors
nnoremap <silent> <leader>er :Errors<CR>
" }}}

" Tabularize {{{
nnoremap <leader>l= :Tabularize /=<CR>
vnoremap <leader>l= :Tabularize /=<CR>
nnoremap <leader>l: :Tabularize /:<CR>
vnoremap <leader>l: :Tabularize /:<CR>
" }}}

" CoffeeScript {{{
" <leader>-e Does CoffeeScript compilation in visual mode
vnoremap <silent> <leader>e :CoffeeCompile<cr>

" <leader>-r Runs CoffeeScript in visual mode
vnoremap <silent> <leader>r :CoffeeRun<cr>
" }}}
" }}}

" Local Settings {{{
if filereadable(expand("~/.vimrc.local"))
  so ~/.vimrc.local
endif
" }}}

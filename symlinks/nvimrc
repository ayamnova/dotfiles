" vim:fdm=marker et fdl=2 ft=vim sts=2 sw=2 ts=2

" Plugins {{{
if !filereadable(expand('~/.nvim/autoload/plug.vim'))
  echo 'Must install vim-plug, run ~/dotfiles/scripts/nvim-setup.sh'
  echo 'Run nvim -u NONE to open without .vimrc'
  exit
endif

call plug#begin()

" TODO: {{{
" Plug 'godlygeek/tabular'
" Plug 'tpope/vim-dispatch'
" Plug 'tpope/vim-abolish'
" Supertab?
" Plug 'gregsexton/gitv'
" jsx
" liquid
" coffeescript
" pangloss/vim-javascript?
" statusline
" syntastic?
" }}}

" Colors {{{
Plug 'w0ng/vim-hybrid'
" Temporary while developing colorscheme
Plug '~/x/vim-escuro'
" Shades indent levels
Plug 'nathanaelkane/vim-indent-guides'
" }}}
" Temporary while editing
"Plug 'fortes/vim-personal-snippets'
Plug '~/x/vim-personal-snippets/'

" Mimic the emacs orgmode, provides a ton of commands
" <Tab> - Cycle visibilty
" Note: Bindings use <localleader> instead of <leader>, have to use '\'
" \ct Rotate TODO state of item
" \cc Toggle checkbox state
" \cn / \cN New checkbox above / below
" \si Insert inactive timestamp
Plug 'jceb/vim-orgmode'

" Editing {{{
" Auto-creates matching parens, etc
" <S-Tab> jumps over single delimiter in insert mode
" <C-G>g jumps over contiguous in insert mode
Plug 'Raimondi/delimitMate'
" Snippet support, see configuration below
Plug 'SirVer/ultisnips'
" Comment / uncomment things quickly
" {Visual}gc comment / uncomment selection
" - gc{motion} comment / uncomment lines for motion
Plug 'tpope/vim-commentary'
" Make plugin actions for a few plugins repeatable
Plug 'tpope/vim-repeat'
" Readline-style keybindings everywhere (e.g. <C-a> for beginning of line)
Plug 'tpope/vim-rsi'
" Needed for orgmode
" Makes <C-a> and <C-x> able to increment/decrement dates
Plug 'tpope/vim-speeddating'
" Edit surrounding quotes / parents / etc
" - {Visual}S<arg> surrounds selection
" - cs/ds<arg1><arg2> change / delete
" - ys<obj><arg> surrounds text object
" - yss<arg> for entire line
Plug 'tpope/vim-surround'
" Extra motion commands, including:
" - [f, ]f next/prev file in directory
" - [n, ]n next/prev SCM conflict
" Toggles a few options:
" - coh hlsearch
" - con number
" - cos spell
" - cow wrap
" Additonal paste options
" - >p paste and indent
" - <p paste and deindent
Plug 'tpope/vim-unimpaired'
" }}}

" File/Buffer Handling {{{
" Cd into the root of of the project with :ProjectRootCD
Plug 'dbakker/vim-projectroot'
" Fuzzy finder, see config below for more
" <C-p> start fuzzy finder
" <C-d> toggle between full path and filename search
" <C-r> Toggle between string and regex mode
" <C-f>/<C-b> to change search modes
" <C-s>/<C-v> open in split / vertical split
" <C-t> open in tab
" <tab> autocomplete directory
Plug 'kien/ctrlp.vim'
" Browser-like history for buffers (can go back several times to previous bufs)
Plug 'ton/vim-bufsurf'
" Adds helpers for UNIX shell commands
" :Remove Delete buffer and file at same time
" :Unlink Delete file, keep buffer
" :Move Rename buffer and file
Plug 'tpope/vim-eunuch'
" Make netrw better
" - '-' in any buffer to go up to directory listing
" - cg/cl to cd into the 
" - ! to use the file in a command
Plug 'tpope/vim-vinegar'
" }}}

" General coding {{{
" async :make via NeoVim job control, replaces syntastic for showing errors
" Provides :Neomake and :Neomake!
" Only load on first use of :Neomake command
Plug 'benekastah/neomake', {
\   'on': ['Neomake']
\ }
" Use SignColumn to mark lines in Quickfix/Location list
Plug 'dhruvasagar/vim-markify'
" }}}

" Git {{{
" Run Git commands from within Vim
" :Gstatus show `git status` in preview window
" - <C-N>/<C-P> next/prev file
" - - add/reset file under cursor
" - ca :Gcommit --amend
" - cc :Gcommit
" - D :Gdiff
" - p :Git add --patch (reset on staged files)
" - q close status
" - r reload status
" :Gcommit for committing
" :Gblame run blame on current file
" - <CR> open commit
" - o/O open commit in split/tab
" - - reblame commit
Plug 'tpope/vim-fugitive'
" Adds gutter signs and highlights based on git diff
" [c ]c to jump to prev/next change hunks
" <leader>hs to stage hunks within cursor
" <leader>hr to revert hunks within cursor
" <leader>hv to preview the hunk
Plug 'airblade/vim-gitgutter'
" }}}

" LESS Support
Plug 'groenewege/vim-less', {
\ 'for': ['less']
\ }

" Javascript {{{
" JS syntax, supports ES6
Plug 'othree/yajs.vim', {
\   'for': ['javascript']
\ }
" JS syntax for common libraries
Plug 'othree/javascript-libraries-syntax.vim', {
\   'for': ['javascript']
\ }
" Tern auto-completion engine for JS (requires node/npm)
if executable('node')
  Plug 'marijnh/tern_for_vim', {
\     'do': 'npm install',
\     'for': ['javascript', 'coffee']
\   }
endif
" Makes gf work on node require statements
Plug 'moll/vim-node', {
\   'for': ['javascript']
\ }
call plug#end()
" }}}
" }}}

" TODO:
" - clipboard setup?
" - VimResized event?

" Vanilla Configuration (no plugins) {{{

" Use `:help 'optionname'` (with the quotes) for documentation

" Core Behavior {{{
" Enable loading plugin / indent settings based on filetype
filetype plugin indent on

" Don't redraw while executing macros, etc
set lazyredraw

" Mapping & keycode timeouts
set timeoutlen=400
set ttimeout
set ttimeoutlen=200

" Never forget
if &history < 1000
  set history=1000
endif

" Allow more than 10 tabs at once
if &tabpagemax < 25
  set tabpagemax=25
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif
" }}}

" UI {{{
" Maintain indent when wrapping
if exists('+breakindent')
  set breakindent
endif

" Highlight textwidth column
set colorcolumn=+1

" Display as much as possible as last line, instead of just showing @
set display=lastline

" Auto-close folds below current foldlevel when cursor leaves
set foldclose=all

" Enable folds, using markers by default
set foldenable
set foldmethod=marker

" Default to having all folds open
set foldlevelstart=99

" Limit folds when using indent or syntax
set foldnestmax=5

set foldopen+=jump

" Always show statusline
set laststatus=2

" Let same document scroll differently in separate panes
set noscrollbind

" Hide default mode text (i.e. INSERT below status line)
set noshowmode

" Use 5 characters for number well
set numberwidth=5

" Support mouse
set mouse=a
set ttymouse=xterm2

" Disable visual bell
set noerrorbells
set visualbell t_vb=

" Show cursor position in bottom right
set ruler

" Keep lines in view at edges of screen
set scrolloff=5
set sidescrolloff=5
set sidescroll=1

" Hide the intro screen, use [+] instead of [Modified], use [RO] instead
" of [readyonly]
set shortmess+=Imr

" Display incomplete commands
set showcmd

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Make filename tab completion more bash-like
set wildmenu
set wildmode=longest,full
" }}}

" File Handling {{{
" Automatically cd into the directory of the file we're editing
set autochdir

" Automatically reload modified files
set autoread

" Automatically write files on :next, :make, etc
set autowrite

" Support mac files
set fileformats+=mac

" Hide buffers instead of closing them (useful for switching between files)
set hidden

" Don't use backup files, we have Git for that
set nobackup
set noswapfile
set nowritebackup

" Ignore autogenerated files
set wildignore+=*.o,*.obj,*.pyc
" Ignore source control
set wildignore+=.git
" Ignore lib/ dirs since the contain compiled libraries typically
set wildignore+=build,lib,node_modules,public,_site,third_party
" Ignore images and fonts
set wildignore+=*.gif,*.jpg,*.jpeg,*.otf,*.png,*.svg,*.ttf
" }}}

" Status line {{{

" Show git repo information
let g:activeStatusLine=" %{StatuslineTag()} "
" Relative path to file in current buffer
let g:activeStatusLine.="\ue0b1 %<%f "
" Use unicode lock symbol if not modifiable, + if modified
let g:activeStatusLine.="%{&readonly ? \"\ue0a2 \" : &modified ? '+ ' : ''}"
" Start left align, show filetype
let g:activeStatusLine.="%= %{&filetype == '' ? 'unknown' : &filetype} "
" Line/col/percent
let g:activeStatusLine.="%l:%2c "
function! StatuslineTag()
  if exists('b:git_dir')
    let dir = fnamemodify(b:git_dir[:-6], ':t')
    return dir." \ue0a0 ".fugitive#head(7)
  else
    return fnamemodify(getwinvar(0, 'getcwd', getcwd()), ':t')
  endif
endfunction

let g:quickfixStatusLine="%t (%l of %L)"
let g:quickfixStatusLine.="%{exists('w:quickfix_title')? ' '.w:quickfix_title : ''}"
let g:quickfixStatusLine.="%=%-15(%l,%c%V%) %P"

" Default status line
set statusline=g:activeStatusLine

" Use different status line for active vs. inactive buffers
function! UpdateStatusLine(status)
  if &filetype=="qf"
    let &l:statusline=g:quickfixStatusLine
  elseif &filetype=="help" || &filetype=="netrw"
    let &l:statusline=&filetype
  elseif a:status
    let &l:statusline=g:activeStatusLine
  else
    " Just show filename & modified when inactive
    let &l:statusline='%f %{&modified ? "+" : ""}'
  endif
endfunction

augroup status_line
  autocmd!
  autocmd BufEnter,TabEnter,WinEnter * call UpdateStatusLine(1)
  autocmd BufLeave,TabLeave,WinLeave * call UpdateStatusLine(0)
augroup END
" }}}

" Editing Behavior {{{
" Indentation {{{
" Basic auto indentation
set autoindent

" C-style indentation
set cindent

" Tabs are spaces
set expandtab

" 2 spaces, not tabs
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Round up indents
set shiftround

" Backspace should delete tabwidth of characters
set smarttab
" }}}

" Remove silly restrictions from backspace
set backspace=indent,eol,start

" Don't scan included files for keyword completion (too slow)
set complete-=i

" Keyword completion brings in the dictionary if spell check is enabled
set complete+=kspell

" Only insert longest common text of matches & show menu when only one match
set completeopt=menuone,longest

" Make sure there's a default dictionary for completion
if filereadable('/usr/share/dict/words')
  set dictionary+=/usr/share/dict/words
endif

" Default formatoptions: crqlbon
" Auto-wrap text and comments using text width
set formatoptions+=tc
" Only break the line if wasn't longer than 80 chars when editing began
" and there is a blank somewhere in the line
set formatoptions+=lb
" Don't continue comments when pressing o/O
set formatoptions-=o
" Recognize numbered lists and wrap accordingly
set formatoptions+=n
" Remove comment leader when joining lines (added in Vim 7.4)
if version >= 704
  set formatoptions+=j
endif

" Show special indicators
set list
" Highlight trailing spaces
set listchars=trail:·,tab:»·
" Show wrap indicators
set listchars+=extends:»,precedes:«
" Show non-breaking spaces
set listchars+=nbsp:%

" Allow incrementing letters
set nrformats+=alpha

" Always assume decimal numbers
set nrformats-=octal

" Show matching brackets for half a second
set showmatch
set matchtime=5

" Wrap at 80 characters
set textwidth=80

" Make h/l move across beginning/end of line
set whichwrap+=hl

" Soft wrap, with indicator
set wrap
set showbreak=«
" }}}

" Colors & Syntax Highlighting {{{
" Base install has some lame themes, this one is OK, I guess
set background=dark
colorscheme industry
if &t_Co >= 256
  " Upgrade if we have more colors, stays with default if not available
  " silent! colorscheme escuro
  silent! colorscheme hybrid
endif

" Enable syntax highlighting by default
syntax enable
" }}}

" Searching {{{
" Match all results in a line by default
set gdefault

" Highlight search results & clear with <C-L>
set hlsearch
nnoremap <silent> <C-L> :nohlsearch<CR><C-L>

" Use ag/ack instead of grep, if available
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --column\ --smart-case\ --follow
  set grepformat=%f:%l:%c:%m
elseif executable('ack')
  set grepprg=ack\ --nogroup\ --nocolor\ --column\ --smart-case\ --follow\ $*
  set grepformat=%f:%l:%c:%m
endif

" K searches for word under cursor in root of project
" Need to force redraw of screen after, since for some reason grep and opening
" the quicklist mess everything up
nnoremap K :silent! grep! "\b<C-R><C-W>\b"<CR>:cwindow<CR><C-L>

" <leader>s starts a find a replace for word under cursor
nnoremap <leader>s :%s/\<<C-R><C-W>\>/<C-R><C-W>/g<Left><Left>

" Q accepts regex input for searching in project via Ack
" Inspired by https://robots.thoughtbot.com/faster-grepping-in-vim
if executable('ack')
  if !exists(':Ack')
    command -nargs=+ -complete=file -bar Ack silent! grep! <args>|cwindow|redraw!
  endif

  nnoremap Q :Ack<SPACE>
endif

" Ignore case, except when using some uppercase
set ignorecase
set smartcase

" Show incremental search matches
set incsearch
" }}}

" Efficiency Shortcuts {{{
" Use comma as leader
let mapleader=","
let g:mapleader=","

" Make ; equivalent to : (faster commands)
nnoremap ; :

" Hide annoying quit message
nnoremap <C-c> <C-c>:echo<cr>

" Close quickfix & help with q, Escape, or Control-C
augroup easy_close
  autocmd!
  autocmd BufReadPost * if !&modifiable|nnoremap <buffer> q :q<cr>|endif
  autocmd BufReadPost * if !&modifiable|nnoremap <buffer> <Esc> :q<cr>|endif
  autocmd BufReadPost * if !&modifiable|nnoremap <buffer> <C-c> :q<cr>|endif
augroup END

" Map jj and jk to <ESC> to leave insert mode quickly
inoremap jj <ESC>
inoremap jk <ESC>

" Make j/k move screen visible lines, not file lines
nnoremap j gj
nnoremap k gk

" CTRL-U for undo in insert mode
inoremap <C-U> <C-G>u<C-U>

" Never use Ex-mode
nnoremap Q <nop>

" Never use manual command
nnoremap K <nop>
vnoremap K <nop>

" Never use ZZ, too dangerous
nnoremap ZZ <nop>

" <leader>c to copy to system clipboard in visual mode
vnoremap <leader>c "+yy

" <leader>v to paste from system clipboard in normal mode
nnoremap <leader>p "+p

" Unimpaired-style toggling of paste mode
nnoremap cop :set invpaste<cr>
" }}}

" Neovim/vim split settings {{{
if has('nvim')
  " Useful reference for Neovim-only features:
  " https://github.com/neovim/neovim/wiki/Differences-from-vim

  " Terminal key bindings for window switching
  " Map jj and jk to <ESC> to leave insert mode quickly
  tnoremap jj <C-\><C-n>
  tnoremap jk <C-\><C-n>
else
  " Defaults in Neovim
  set nocompatible
  set encoding=utf-8
  set ttyfast
endif
" }}}
" }}}

syntax enable

augroup on_vim_enter
  autocmd!
  autocmd VimEnter * call OnVimEnter()
augroup END

" Called after plugins have loaded {{{
function! g:OnVimEnter()
  augroup javascript_after_configuration
    autocmd!
    if exists(':Neomake')
      " Check for lint errors on open & write
      autocmd BufRead,BufWritePost *.js silent Neomake|redraw
    endif
  augroup END

  if exists(':ProjectRootCD')
    " Search across entire project when possible
    nnoremap K :ProjectRootCD<CR>:silent! grep! "\b<C-R><C-W>\b"<CR>:cwindow<CR><C-L>
    nnoremap Q :ProjectRootCD<CR>:Ack<SPACE>
  endif
endfunction
" }}}

" Filetype configuration {{{

augroup filetype_tweaks
  autocmd!

  " Not all files should wrap automatically
  autocmd BufNewFile,BufReadPost *.txt,*.md,*.markdown,*.json,*.conf,*.ini setlocal textwidth=0

  " Enable spell checking in some filetypes
  autocmd BufNewFile,BufReadPost *.txt,*.md,*.markdown,COMMIT_EDITMSG
          \ setlocal spell

  " Disable spell checking on unmodifiable files (what's the point?)
  autocmd BufReadPost * if !&modifiable | setlocal nospell | endif

  " .md is markdown, not modula
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown

  " ES6 is JS
  autocmd BufRead,BufNewFile *.es6 set filetype=javascript

  " Set up linting for JS
  if executable('eslint')
    autocmd FileType javascript setlocal makeprg=eslint\ -f\ compact\ %
    autocmd FileType javascript setlocal errorformat=%E%f:\ line\ %l\\,\ col\ %c\\,\ Error\ -\ %m
    autocmd FileType javascript setlocal errorformat+=,%W%f:\ line\ %l\\,\ col\ %c\\,\ Warning\ -\ %m
  endif

  " Use esformatter to autoformat (gq in Visual mode)
  if executable('esformatter')
    autocmd FileType javascript setlocal formatprg=esformatter
  endif

  " Simple folding for JS
  autocmd FileType javascript setlocal fdm=marker fmr={,}

  " <leader>tr to rename variable under cursor
  autocmd FileType javascript nnoremap <leader>tr :TernRename<cr>
  " <leader>td to go to definition
  autocmd FileType javascript nnoremap <leader>td :TernDef<cr>

  " Use folds in .vimrc
  autocmd FileType vim set fdm=marker fdl=9

  " Consider '-' part of a world when tab completion, etc in css/less
  autocmd FileType css setlocal iskeyword+=-
  autocmd FileType less setlocal iskeyword+=-

  " Simple folding for CSS/LESS
  autocmd FileType css setlocal fdm=marker fmr={,}
  autocmd FileType less setlocal fdm=marker fmr={,}

  " Fold via indent in CoffeeScript and Python
  autocmd FileType coffee setlocal foldmethod=indent
  autocmd FileType python setlocal foldmethod=indent

  " Python uses 4 spaces
  autocmd FileType python setlocal shiftwidth=4
augroup END
" }}}

" Plugin Configuration {{{

" Markify {{{
" Use nicer symbols
let g:markify_error_text = '✗'
let g:markify_warning_text = '⚠'
let g:markify_info_text = 'ℹ'
" }}}

" CtrlP {{{
" <C-p> to search files, buffers, and MRU
let g:ctrlp_map='<c-p>'
let g:ctrlp_cmd='CtrlPMixed'

" Don't jump to a window that is already open, but do jump to tabs
let g:ctrlp_switch_buffer = 't'

" <M-p> for just Buffers
nnoremap <silent> <M-p> :CtrlPBuffer<CR>

" Use ag for listing files
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command='ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching=0
endif
" }}}

" UltiSnips {{{
" Use tab to expand snippet and move to next target. Shift tab goes back.
" <C-k> lists available snippets for the file
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<C-k>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
" }}}

" delimitMate {{{
" <CR> after delimiter does block style
let delimitMate_expand_cr=2
" Pressing space after delimiter adds space on both sides
let delimitMate_expand_space=1
" Goes past closing expansions when on next line
let delimitMate_jump_expansion=1
" }}}

" Tern {{{
let g:tern_show_signature_in_pum=1
let g:tern_show_argument_hints=1
" }}}

" GitGutter {{{
" Unimpaired-style toggling for the line highlights
" cogg Gutter / cogl line highlight
nnoremap <silent> cogg :GitGutterToggle<CR>
nnoremap <silent> cogl :GitGutterLineHighlightsToggle<CR>

" Ignore whitespace
let g:gitgutter_diff_args='-w'

" Use raw grep
let g:gitgutter_escape_grep=1

" Use highlighting as well as signs
let g:gitgutter_highlight_lines=1

" Be aggressive about looking for diffs
let g:gitgutter_realtime=1
let g:gitgutter_eager=1

" Tweak signs
let g:gitgutter_sign_modified='±'
let g:gitgutter_sign_modified_removed='≠'
" }}}

" Indent Guides {{{
" Default guides to on everywhere
let g:indent_guides_enable_on_vim_startup=1

" Don't turn on mapping for toggling guides
let g:indent_guides_default_mapping=0

" Don't use their colors, depending on the colorscheme to define
let g:indent_guides_auto_colors=0

" Wait until we've nested a little before showing
let g:indent_guides_start_level=3

" Skinny guides
let g:indent_guides_guide_size=1
" }}}

" BufSurf {{{
" Use [b and ]b (taken over from unimpaired)
nnoremap [b :silent BufSurfBack<CR>
" Use <M-^>/<M-6> as forward
nnoremap ]b :silent BufSurfForward<CR>
" }}}

" Javascript libraries syntax {{{
let g:used_javascript_libs='react'
" }}}
" }}}

" Local Settings {{{
if filereadable(expand("~/.nvimrc.local"))
  so ~/.nvimrc.local
endif
" }}}

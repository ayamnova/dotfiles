# vim:ft=sh

# Sentinel value to know we've loaded this file
export PROFILE_LOADED=1

# Use NeoVim if we have it
if command -v nvim > /dev/null; then
  VISUAL=nvim
else
  VISUAL=vim
fi
EDITOR=$VISUAL
export EDITOR VISUAL

if command -v most > /dev/null; then
  export PAGER=most
  export MANPAGER=most
fi

# Tell ls to use colors by default (only works on Mac/BSD)
export CLICOLOR=1

# VirtualEnv {{{
# Centralized location for new virtual environments
export VIRTUAL_ENV_DEFAULT_DIR=$HOME/.local/virtualenv
# }}}

# If available, we use git to list files from the root directory (not from the
# current directory as in other fzf cases). Otherwise, fallback to ag
export FZF_DEFAULT_COMMAND='(git ls-files -co --exclude-standard $(git rev-parse --show-toplevel) || ag -l -g "") 2> /dev/null'
export FZF_DEFAULT_OPTS="--extended"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Case insensitive by default
export FZF_COMPLETION_OPTS='-i'

# Use ag for faster default find command for listing candidates
if [ -d "$HOME/.local/source/fzf/" ]; then
  _fzf_compgen_path() {
    ag -g "" "$1"
  }
fi

# Store config/cache files in default locations, but declare variables for use
# on platforms that don't (ahem, Mac OS)
export XDG_CACHE_HOME=$HOME/.cache
export XDG_CONFIG_HOME=$HOME/.config

# Helper function for sourcing a file only if it exists
function sourceIfExists() {
  for file in $@; do
    if [ -f "$file" ]; then
      source "$file"
    fi
  done
}

export -f sourceIfExists

# OS overrides
OS=`uname`
if [ "$OS" = "Darwin" ]; then
  sourceIfExists "$HOME/.profile.osx"
elif [ "$OS" = "Linux" ]; then
  sourceIfExists "$HOME/.profile.linux"
fi

# Local overrides
sourceIfExists "$HOME/.profile.local"

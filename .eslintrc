# vim: set filetype=yaml
# Not using ES6 yet
ecmaFeatures:
  arrowFunctions: false
  binaryLiterals: false
  blockBindings: false
  classes: false
  defaultParams: false
  destructuring: false
  forOf: false
  generators: false
  modules: false
  objectLiteralComputedProperties: false
  objectLiteralDuplicateProperties: false
  objectLiteralShorthandMethods: false
  objectLiteralShorthandProperties: false
  octalLiterals: false
  regexUFlag: false
  regexYFlag: false
  spread: false
  superInFunctions: false
  templateStrings: false
  unicodeCodePointEscapes: false
  globalReturn: false
  jsx: false

env:
  # Provides require/define from amd spec
  amd: true
  # Browser globals
  browser: true
  # Mocha globals
  mocha: true
  # Node globals
  node: true

globals:
  console: true
  module: true

# All rules documented here: http:#eslint.org/docs/rules/
rules:
  # Possible errors

  # Don't allow unnecessary trailing commas (e.g. [1,2,])
  comma-dangle: [2, "never"]
  # Allow assignments in conditions only if surrounded by extra parens
  no-cond-assign: [1, "except-parens"]
  # Allow console.log for node
  no-console: 0
  # Warn about if (false) and similar
  no-constant-condition: 1
  # Watch for mistakes writing RegEx for invisible characters in ASCII 0-31
  no-control-regex: 2
  # Don't want debugger statements in production
  no-debugger: 2
  # Functions that repeat argument names are SyntaxErrors in strict mode
  no-dupe-args: 2
  # Object declarations with the same key (e.g. {a: 1, a: 2})
  no-dupe-keys: 2
  # Duplicate case in switch statements
  no-duplicate-case: 2
  # Empty statements (e.g. if (x) {}), must at least put comment within
  no-empty: 2
  # Don't allow empty character class in regexp (e.g. /[]/)
  no-empty-class: 2
  # Don't allow re-assignment of exceptions
  no-ex-assign: 2
  # Warn about unnecessary boolean casts in conditionals (e.g. if (!!x))
  no-extra-boolean-cast: 1
  # Warn about unnecessary parens (e.g. (2 * 3) instead of 2 * 3)
  no-extra-parens: 1
  # No extra semi-colons (e.g. foo();;;)
  no-extra-semi: 2
  # Don't allow overwriting of functions declared via `function name()` syntax
  no-func-assign: 2
  # Variable/Function declarations must occur at top-level of scope
  no-inner-declarations: [2, "both"]
  # Validate string arguments passed to the RegExp constructor
  no-invalid-regexp: 2
  # Don't allow non-space/tab whitespace (e.g. zero width space)
  no-irregular-whitespace: 2
  # Catch use of (!a in b) instead of (!(a in b))
  no-negated-in-lhs: 2
  # Don't allow calling global objects as functions (e.g. Math())
  no-obj-calls: 2
  # Don't allow multiple spaces in RegExp, makes them hard to read
  no-regex-spaces: 1
  # Don't watch out for reserved words as keys (e.g. { enum: 'foo' })
  no-reserved-keys: 0
  # Don't allow array declarations like [1,,2] which will have three items
  no-sparse-arrays: 2
  # Warn about unreachable code
  no-unreachable: 1
  # Always use isNaN(), don't allow comparison to NaN
  use-isnan: 2
  # If we're going to use JSDoc, then we should do it right
  valid-jsdoc:
    - 1
    - prefer:
        # Use @returns, not @return
        return: "returns"
      # Don't require full descriptions just yet
      requireParamDescription: false
      requireReturnDescription: false
  # Catch typos in typeof checks (e.g. typeof foo === 'strng')
  valid-typeof: 2

  # Best Practices
  # JS-hoisting of variables can cause bugs if you think it works like C
  block-scoped-var: 1
  # Cyclomatic complexity (disabled)
  complexity: [0, 4]
  # All return statements either return a value, or they don't
  consistent-return: 2
  # Don't allow omission of curly braces for conditionals, etc
  curly: [2, "all"]
  # Provide a default in switch, unless there's a comment with "no default"
  default-case: 1
  # Use foo.bar instead of foo['bar']
  dot-notation: 1
  # Must use triple equals
  eqeqeq: 2
  # Use hasOwnProperty when using a for in loop (disabled)
  guard-for-in: 0
  # No window.alert
  no-alert: 2
  # arguments.caller, etc aren't allowed in strict mode
  no-caller: 2
  # Escape division operators in RegExps
  no-div-regex: 2
  # If statements that return don't need else blocks
  no-else-return: 1
  # Labeled statements can only be used with labeled break/continue
  no-empty-label: 1
  # Must triple equal for null
  no-eq-null: 2
  # Don't use eval
  no-eval: 2
  # Watch out when extending native objects (e.g. Array.prototype)
  no-extend-native: 1
  # Warn if bound function doesn't use this
  no-extra-bind: 1
  # No fallthrough in case statements (override with // falls through)
  no-fallthrough: 1
  # Decimal values must have a number before and after the .
  no-floating-decimal: 2
  # Don't allow eval to happen via setTimeout or setInterval
  no-implied-eval: 2
  # __iterator__ isn't really supported in browsers
  no-iterator: 2
  # Don't use labeled break statements
  no-labels: 2
  # Don't allow standalone blocks (no point)
  no-lone-blocks: 2
  # Don't create functions in loops (leads to bugs via continuations)
  no-loop-func: 2
  # Consistent whitespace around conditions, etc
  no-multi-spaces:
    - 1
    - exceptions:
  # Multi-line strings do not work in JS with a \
  no-multi-str: 2
  # Don't reassign native objects (e.g. encodeURIComponent)
  no-native-reassign: 2
  # If you're calling new, gotta do something with the value
  no-new: 2
  # Don't use new Function()
  no-new-func: 2
  # Don't use wrappers for native objects (e.g. new Number(33))
  no-new-wrappers: 2
  # No octal numbers
  no-octal: 2
  # No octal escape sequences (deprecated in ES5)
  no-octal-escape: 2
  # Don't modify function parameters, since it modifies the arguments object
  no-param-reassign: 2
  # Don't allow process.env (disabled)
  no-process-env: 0
  # Don't allow __proto__ (deprecated)
  no-proto: 2
  # Don't allow redeclaring a variable with var
  no-redeclare: 2
  # Don't assign something in return, it's confusing
  no-return-assign: 2
  # No javascript: urls
  no-script-url: 2
  # Don't try if (x === x)
  no-self-compare: 2
  # Don't use commas for multiple operations
  no-sequences: 2
  # Must throw actual Error objects, not just strings
  no-throw-literal: 2
  # Don't allow expressions that do nothing
  no-unused-expressions: 2
  # Don't use void
  no-void: 2
  no-warning-comments:
    - 1
    - terms:
      - "bug"
      - "fixme"
      - "todo"
      - "xxx"
      location: "start"
  # Don't use with
  no-with: 2
  # Require radix with parseInt
  radix: 2
  # Hoisting means variable declarations are effectively on top anyway
  vars-on-top: 1
  # Immediate function invocation must be wrapped
  wrap-iife: 2
  # Avoid yoda conditions (disabled)
  yoda: 1

  # Strict mode
  # Use strict should only happen at global level (disabled)
  strict: [0, "global"]

  # Variable declarations
  # Don't let catch variables clobber something from outside the scope
  no-catch-shadow: 2
  # Don't allow variable deletion (doesn't actually work)
  no-delete-var: 2
  # Don't allow labels that are the same as variable names
  no-label-var: 2
  # Don't allow variable shadowing (re-declaring something from outer scope)
  no-shadow: 2
  # Don't shadow reserved names (e.g. NaN)
  no-shadow-restricted-names: 2
  # Don't allow using undefined variables (make globals explicit)
  no-undef: 2
  # Don't set vars to undefined
  no-undef-init: 2
  # Don't used undefined variable
  no-undefined: 2
  # Warn about unused variables
  no-unused-vars: 1
  # Can't use functions/variables before their definition
  no-use-before-define: 2

  # Node
  # Errors must be handled
  handle-callback-err: 2
  # Group requires / variable definitions (disabled)
  no-mixed-requires: 0
  # Don't new things that are required
  no-new-require: 2
  # Must use path.join with __dirname or __filename
  no-path-concat: 2
  # Don't allow calling process.exit()
  no-process-exit: 2
  # Blacklist certain modules for inclusion (disabled)
  no-restricted-modules: [0]
  # Warn when using *Sync versions of APIs
  no-sync: 1

  # Stylistic issues
  # 2 spaces
  indent: [2, 2]
  # Brace styles, use one true brace style
  brace-style: [2, "1tbs"]
  # Use camelCase variables
  camelcase: [1, "always"]
  # Spaces after commas, always
  comma-spacing:
    - 2
    - before: false
      after: true
  # Commas at end of line
  comma-style: [2, "last"]
  # Always use that as this
  consistent-this: [2, "that"]
  # Require new line at end (disabled)
  eol-last: 0
  # Require functions to always have names (disabled)
  func-names: 0
  # Always declare functions as variables
  func-style: [2, "expression"]
  # Space after, but not before object keys
  key-spacing:
    - 2
    - beforeColon: false
      afterColon: true
  # Avoid callback nesting hell (disabled)
  max-nested-callbacks: [0, 4]
  # Constructors must be capitalized, and capitalized vars are constructors
  # disabled for now since React components break this rule
  new-cap:
    - 1
    - newIsCap: true
    - capIsNew: true
    - newIsCapExceptions: []
    - capIsNewExceptions: ["React"]
  # Require parens after constructor
  new-parens: 2
  # Require newline after var
  newline-after-var: [1, "always"]
  # Only use Array constructor for sparse arrays
  no-array-constructor: 2
  # Don't use continue in loops (disabled)
  no-array-constructor: 0
  # Comments always on their own line
  no-inline-comments: 1
  # Convert single if statement in else to an else if
  no-lonely-if: 2
  # Only allow spaces anyway
  no-mixed-spaces-and-tabs: 2
  # Warn about unnecessary whitespace
  no-multiple-empty-lines:
    - 1
    - max: 2
  # Don't nest ternaries
  no-nested-ternary: 1
  # Don't use new Object()
  no-new-object: 2
  # Never put a space after function declaration
  no-spaced-func: 2
  # Allow ternary operators
  no-ternary: 0
  # No trailing whitespace at end of line
  no-trailing-spaces: 2
  # Allow dangling underscores for now
  no-underscore-dangle: 0
  # Don't unnecessarily wrap functions in parens
  no-wrap-func: 1
  # Require one variable declaration per scope (disabled)
  one-var: [0, "always"]
  # Break lines after an operator
  operator-linebreak: [2, "after"]
  # No excess whitespace on blocks
  padded-blocks: [2, "never"]
  # Make sure to quote object properties when needed
  quote-props: [2, "as-needed"]
  # Single quotes, except where it would require escaping
  quotes: [2, "single", "avoid-escape"]
  # Always use semicolons
  semi: [2, "always"]
  # Always need space after a semi-colon on same line
  semi-spacing:
    - 2
    - before: false
      after: true
  # Always sort variables
  sort-vars: 2
  # Always want space after keywords (if, else, etc)
  space-after-keywords: [2, "always"]
  # Always want space after conditional
  space-before-blocks: [2, "always"]
  # No spaces after function clause
  space-before-function-paren: [2, "never"]
  # No spaces around brackets
  space-in-brackets: [2, "never"]
  # No spaces around parens
  space-in-parens: [2, "never"]
  # Spaces around infix operators
  space-infix-ops: 2
  # Require space after return, etc
  space-return-throw-case: 2
  # Require space after unary operators such as typeof, but not ++
  space-unary-ops:
    - 2
    - words: true
      non-words: false
  # Require space after comment
  spaced-line-comment: [2, "always"]
  # Don't need to wrap regexes
  wrap-regex: 0

  # ES6
  # Require let/const instead of var (disabled)
  no-var: 0
  # Always put * right before function
  generator-star-spacing: [2, "before"]

  # Legacy options
  # Try not to nest things too deeply
  max-depth: [1, 5]
  # 80 chars per line
  max-len: [2, 80]
  # Max params on a function (disabled)
  max-len: [0, 4]
  # Max statements in a function (disabled)
  max-statements: [0, 20]
  # Prohibit bitwise operators
  # TODO: Make strict?
  no-bitwise: 1
  # Allow ++ and --
  no-plusplus: 0
